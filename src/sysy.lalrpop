use crate::frontend::ast::*;

grammar;

match {
    // 跳过空白符和注释
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef  { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::InnerDecl( <> ),
    <stmt: Stmt> => BlockItem::InnerStmt( <> ),
}

Block: Block = "{" <block_items: (BlockItem)*> "}" => Block { <> };

Stmt: Stmt = {
    "return" <exp: Exp> ";" => Stmt::ReturnStmt ( <> ),
    <lval: Ident> "=" <exp: Exp> ";" => Stmt::AssignStmt ( <> ),
    <exp: (Exp)?> ";" => Stmt::ExpStmt ( <> ),
    <block: Block> => Stmt::Block( <> ),
}

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Exp = <lor_exp: LOrExp> => Exp::InnerLOrExp( <> );

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::InnerPrimaryExp(Box::new( <> )),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::InnerUnaryExp(unary_op, Box::new(unary_exp)),
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::InnerExp(Box::new( <> )),
    <lval: Ident> => PrimaryExp::InnerLVal( <> ),
    <num: Number> => PrimaryExp::Number( <> ),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::POSITIVE,
    "-" => UnaryOp::NEGATIVE,
    "!" => UnaryOp::NOT,
}

MulExp: MulExp =  {
    <unary_exp: UnaryExp> => MulExp::InnerUnaryExp( <> ),
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::InnerMulExp(Box::new(mul_exp), mul_op, unary_exp),
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::InnerMulExp( <> ),
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::InnerAddExp(Box::new(add_exp), add_op, mul_exp),
}

AddOp: AddOp = {
    "+" => AddOp::ADD,
    "-" => AddOp::SUBTRACT,
}

MulOp: MulOp = {
    "*" => MulOp::MULTIPLY,
    "/" => MulOp::DIVIDE,
    "%" => MulOp::MOD,
}

LOrExp: LOrExp = {
    <land_exp: LAndExp> => LOrExp::InnerLAndExp( <> ),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::InnerLOrExp(Box::new(lor_exp), land_exp),
}

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::InnerEqExp( <> ),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::InnerLAndExp(Box::new(land_exp), eq_exp),
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::InnerRelExp( <> ),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::InnerEqExp(Box::new(eq_exp), eq_op, rel_exp),
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::InnerAddExp( <> ),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::InnerRelExp(Box::new(rel_exp), rel_op, add_exp),
}

EqOp: EqOp = {
    "==" => EqOp::EQUAL,
    "!=" => EqOp::NOTEQUAL,
}

RelOp: RelOp = {
    "<" => RelOp::LESSTHAN,
    ">" => RelOp::GREATERTHAN,
    "<=" => RelOp::LESSTHANOREQUAL,
    ">=" => RelOp::GREATERTHANOREQUAL,
}

ConstInitVal: ConstInitVal = <const_exp: ConstExp> => ConstInitVal { <> };

InitVal: InitVal = <exp: Exp> => InitVal { <> };

ConstDef: ConstDef = <ident: Ident> "=" <const_initval: ConstInitVal> => ConstDef { <> };

VarDef: VarDef = {
    <ident: Ident> "=" <initval: InitVal> => VarDef::InnerInit ( <> ),
    <ident: Ident> => VarDef::InnerNoInit ( <> ),
}

Decl: Decl = {
    <const_decl: ConstDecl> => Decl::InnerConstDecl( <> ),
    <var_decl: VarDecl> => Decl::InnerVarDecl( <> ),
}

ConstDecl: ConstDecl = "const" "int" <const_def: ConstDef> <mut const_defs: ("," <ConstDef>)*> ";" => {
    const_defs.insert(0, const_def);
    ConstDecl { const_defs }
};

VarDecl: VarDecl = "int" <var_def: VarDef> <mut var_defs: ("," <VarDef>)*> ";" => {
    var_defs.insert(0, var_def);
    VarDecl { var_defs }
};

ConstExp: ConstExp = <exp: Exp> => ConstExp { <> };